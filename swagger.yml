swagger: '2.0'
info:
  description: Jomblo Alarm
  version: 1.0.0
  title: Jomblo Alarm
  # put the contact info for your development or API team
  contact:
    email: mathewtapilatu1@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: Login
  description: User Login
- name: Register
  description: User Register
- name: Matches
  description: Matches
- name: Chat
  description: Chat

paths:
  /Chat:
    post:
      tags:
      - Chat
      summary: Create Chat
      description: |
         user Chat
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Chat
        description: Chat
        schema:
          $ref: '#/definitions/ChatPost'
      responses:
        200:
          description: Response register
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/status_code_200'
    get:
      tags:
      - Chat
      summary: Show data Chat
      description: |
        user Chat
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Chat
        description: Chat
        schema:
          $ref: '#/definitions/ChatGet'
      responses:
        200:
          description: Response register
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/status_code_200'
    put:
        tags:
        - Chat
        summary: Edit Chat
        description: |
          user Chat
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Chat
          description: Chat
          schema:
            $ref: '#/definitions/ChatPut'
        responses:
          200:
            description: Response register
            schema:
              type: object
              properties:
                status_code:
                  type: integer
                  example: 200
                message:
                  type: string
                  example: 'OK'
                data:
                  $ref: '#/definitions/status_code_200'
    delete:
        tags:
        - Chat
        summary: Delete Chat
        description: |
          Delete Chat
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - in: body
          name: Chat
          description: Chat
          schema:
            $ref: '#/definitions/ChatDelete'
        responses:
          200:
            description: Response register
            schema:
              type: object
              properties:
                status_code:
                  type: integer
                  example: 200
                message:
                  type: string
                  example: 'OK'
                data:
                  $ref: '#/definitions/status_code_200'

  /Matches:
    post:
      tags:
      - Matches
      summary: Matches
      description: |
        userlike 
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Matches
        description: Matches
        schema:
          $ref: '#/definitions/Matches'
      responses:
        200:
          description: Response register
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/status_code_200'

  /register:
    post:
      tags:
      - Register
      summary: Register users
      description: |
        add Username And Password 
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Register User
        description: Register User
        schema:
          $ref: '#/definitions/Register'
      responses:
        200:
          description: Response register
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/status_code_200'


        502:
          description: Resnponse register
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 502
              message:
                type: string
                example: '502 Bad Gateway'

       


  /login:
    post:
      tags:
      - Login
      summary: login users
      description: |
        Passing Username And Password to get Token JWT
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Login User
        description: Login User
        schema:
          $ref: '#/definitions/Register'
      responses:

        200:
          description: Response Login
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/status_code_200'

        400:
          description: Response Login
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 400
              message:
                type: string
                example: 'Bad Request'
              data:
                $ref: '#/definitions/status_code_400'

        502:
          description: Resnponse Login
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 502
              message:
                type: string
                example: '502 Bad Gateway'

#model
definitions:
  ChatPost:
    type: object
    required:
    - userlike
    - username
    properties:
      userlike:
        type: string
        example: kakeksugiono
      username:
        type: string
        example: mariaoazawa
  ChatGet:
    type: object
    required:
    - ChatTo
    - ChatFrom
    - username
    - userlike
    properties:
      ChatTo:
        type: string
        example: Hy
      ChatFrom:
        type: string
        example: Hy Juga
      userlike:
        type: string
        example: kakeksugiono
      username:
        type: string
        example: mariaoazawa
  ChatPut:
    type: object
    required:
    - EditChat
    - userlike
    - username
    properties:
      userlike:
        type: string
        example: kakeksugiono
      username:
        type: string
        example: mariaoazawa
      EditChat:
        type: string
        example:
  ChatDelete:
    type: object
    required:
    - DeleteChat
    - userlike
    - username
    properties:
      userlike:
        type: string
        example: kakeksugiono
      username:
        type: string
        example: mariaoazawa
      DeleteChat:
        type: string
        example:
        

  Matches:
    type: object
    required:
    - userlike
    - username
    - tanggalmatches
    properties:
      userlike:
        type: string
        example: kakeksugiono 
      username:
        type: string
        example: mariaoazawa
      tanggalmatches:
        type: string
        example: 2021-08-09T12:02:57Z
        format: date-time
     
  Register:
    type: object
    required:
    - username
    - email
    - password
    properties:
      username:
        type: string
        example: mariaoazawa
      password:
        type: string
        example: ayokmaenmas
      email:
        type: string
        example: mariaozawa@gmail.com

  Login:
    type: object
    required:
    - username
    - password
    properties:
      email:
        type: string
        example: mariaozawa
      password:
        type: string
        example: ayokmaenmas

  status_code_200:
    type: object
    required:
    - username
    - token
    - expiredtoken
    properties:
      username:
        type: string
        example: mariaoazawa
      token:
        type: string
        example: ' eyJhbGciOiJIUzI1NiIsI'
      expiredtoken:
        type: string
        example: 2021-08-09T12:02:57Z
        format: date-time

  status_code_400:
    type: object
    required:
    - username
    - token
    - expiredtoken
    properties:
      username:
        type: string
        example: 
      token:
        type: string
        example: ' eyJhbGciOiJIUzI1NiIsI'
      expiredtoken:
        type: string
        example: 2021-08-09T12:02:57Z
        format: date-time
        
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /mathewtapilatu/JombloAlarm
schemes:
 - https

 # okay
